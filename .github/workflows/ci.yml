name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version_level:
        type: choice
        required: true
        description: Version level
        options:
          - commit
          - patch
          - minor
          - major
        default: 'patch'
      specific-version:
        description: 'Specific version'
        required: false
        default: ''

jobs:
  build_amd64:
    name: "Build amd64 image"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builders

      - uses: docker/setup-buildx-action@v3
        with:
          version: latest
          endpoint: builders

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push amd64 image
        id: docker_build_amd64
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          file: ./Dockerfile
          push: true
          provenance: false
          tags: ${{ secrets.DOCKER_USERNAME }}/energyapp:${{ github.sha }}-amd64

  build_arm64:
    name: "Build arm64 image"
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Context for Buildx
        id: buildx-context
        run: |
          docker context create builders

      - uses: docker/setup-buildx-action@v3
        with:
          version: latest
          endpoint: builders

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push arm64 image
        id: docker_build_arm64
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/arm64
          file: ./Dockerfile
          push: true
          provenance: false
          tags: ${{ secrets.DOCKER_USERNAME }}/energyapp:${{ github.sha }}-arm64

  create-manifests-and-release:
    name: "Create Docker Manifests and Release"
    needs: [build_amd64, build_arm64]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          fallback: 0.0.0

      - name: 'Get next version'
        id: semvers
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.previoustag.outputs.tag }}

      - name: Print WyriHaximus current and next version
        run: |
          echo "Major version: ${{ steps.semvers.outputs.major }}"
          echo "Minor version: ${{ steps.semvers.outputs.minor }}"
          echo "Patch version: ${{ steps.semvers.outputs.patch }}"

      - name: Get Branch
        id: branch
        run: echo "COMMIT_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Get Hash
        id: hash
        run: echo "COMMIT_HASH=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV

      - name: Check Branch
        run: echo "${{ env.COMMIT_BRANCH }}"

      - name: Check Hash
        run: echo "${{ env.COMMIT_HASH }}"

      - name: Set release version
        run: |
          if ${{ github.event.inputs.specific-version != '' }};
          then
            echo "TAG_VERSION=${{ github.event.inputs.specific-version }}" >> $GITHUB_ENV
            echo "RELEASE_VERSION=${{ github.event.inputs.specific-version }}" >> $GITHUB_ENV
          else
            if ${{ github.event.inputs.version_level == 'major' }};
            then
              echo "TAG_VERSION=${{ steps.semvers.outputs.major }}" >> $GITHUB_ENV
              echo "RELEASE_VERSION=${{ steps.semvers.outputs.major }}" >> $GITHUB_ENV
            elif ${{ github.event.inputs.version_level == 'minor' }};
            then
              echo "TAG_VERSION=${{ steps.semvers.outputs.minor }}" >> $GITHUB_ENV
              echo "RELEASE_VERSION=${{ steps.semvers.outputs.minor }}" >> $GITHUB_ENV
            elif ${{ github.event.inputs.version_level == 'patch' }};
            then
              echo "TAG_VERSION=${{ steps.semvers.outputs.patch }}" >> $GITHUB_ENV
              echo "RELEASE_VERSION=${{ steps.semvers.outputs.patch }}" >> $GITHUB_ENV
            else
              echo "TAG_VERSION=${{ steps.semvers.outputs.patch }}-${{ env.COMMIT_HASH }}" >> $GITHUB_ENV
              echo "RELEASE_VERSION=${{ steps.semvers.outputs.patch }}-${{ env.COMMIT_HASH }}" >> $GITHUB_ENV
            fi
          fi

      - name: Print release and tag version
        run: |
          echo "Tag version: ${{ env.TAG_VERSION }}"
          echo "Release version: ${{ env.RELEASE_VERSION }}"

      - name: Set output variables
        id: set_outputs
        run: |
          echo "TAG_VERSION=${{ env.TAG_VERSION }}" >> $GITHUB_OUTPUT
          echo "RELEASE_VERSION=${{ env.RELEASE_VERSION }}" >> $GITHUB_OUTPUT
          echo "COMMIT_BRANCH=${{ env.COMMIT_BRANCH }}" >> $GITHUB_OUTPUT
          echo "COMMIT_HASH=${{ env.COMMIT_HASH }}" >> $GITHUB_OUTPUT

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create SHA manifest and push
        run: |
          docker manifest create \
            ${{ secrets.DOCKER_USERNAME }}/energyapp:${{ env.RELEASE_VERSION }} \
            --amend ${{ secrets.DOCKER_USERNAME }}/energyapp:${{ github.sha }}-amd64 \
            --amend ${{ secrets.DOCKER_USERNAME }}/energyapp:${{ github.sha }}-arm64
          docker manifest push ${{ secrets.DOCKER_USERNAME }}/energyapp:${{ env.RELEASE_VERSION }}

      - name: Create latest manifest and push
        run: |
          docker manifest create \
            ${{ secrets.DOCKER_USERNAME }}/energyapp:latest \
            --amend ${{ secrets.DOCKER_USERNAME }}/energyapp:${{ github.sha }}-amd64 \
            --amend ${{ secrets.DOCKER_USERNAME }}/energyapp:${{ github.sha }}-arm64
          docker manifest push ${{ secrets.DOCKER_USERNAME }}/energyapp:latest

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        env:
          TAG_VERSION: ${{ env.TAG_VERSION }}
          RELEASE_VERSION: ${{ env.RELEASE_VERSION }}
          COMMIT_BRANCH: ${{ env.COMMIT_BRANCH }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag: "${{ env.TAG_VERSION }}"
          name: "${{ env.RELEASE_VERSION }}"
          commit: "${{ env.COMMIT_BRANCH }}"
          draft: false
          prerelease: false
          allowUpdates: true
          updateOnlyUnreleased: true