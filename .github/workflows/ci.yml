name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version_level:
        type: choice
        required: true
        description: Version level
        options:
          - commit
          - patch
          - minor
          - major
        default: 'patch'
      specific-version:
        description: 'Specific version'
        required: false
        default: ''
      push:
        description: 'Push to DockerHub'
        required: true
        default: true
        type: boolean

jobs:
  buildVariables:
    name: "Get variables"
    runs-on: ubuntu-latest
    outputs:
      tag_version: ${{ steps.set_outputs.outputs.TAG_VERSION }}
      release_version: ${{ steps.set_outputs.outputs.RELEASE_VERSION }}
      commit_branch: ${{ steps.set_outputs.outputs.COMMIT_BRANCH }}
      commit_hash: ${{ steps.set_outputs.outputs.COMMIT_HASH }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - name: 'Get Previous tag'
        id: previoustag
        uses: "WyriHaximus/github-action-get-previous-tag@v1"
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        with:
          fallback: 0.0.0

      - name: 'Get next version'
        id: semvers
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.previoustag.outputs.tag }}

      - name: Print WyriHaximus current and next version
        run: |
          echo "Major version: ${{ steps.semvers.outputs.major }}"
          echo "Minor version: ${{ steps.semvers.outputs.minor }}"
          echo "Patch version: ${{ steps.semvers.outputs.patch }}"

      - name: Get Branch
        id: branch
        run: echo "COMMIT_BRANCH=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Get Hash
        id: hash
        run: echo "COMMIT_HASH=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV

      - name: Check Branch
        run: echo "${{ env.COMMIT_BRANCH }}"

      - name: Check Hash
        run: echo "${{ env.COMMIT_HASH }}"

      - name: Set release version
        run: |
          if ${{ github.event.inputs.specific-version != '' }};
          then
            echo "TAG_VERSION=${{ github.event.inputs.specific-version }}" >> $GITHUB_ENV
            echo "RELEASE_VERSION=${{ github.event.inputs.specific-version }}" >> $GITHUB_ENV
          else
            if ${{ github.event.inputs.version_level == 'major' }};
            then
              echo "TAG_VERSION=${{ steps.semvers.outputs.major }}" >> $GITHUB_ENV
              echo "RELEASE_VERSION=${{ steps.semvers.outputs.major }}" >> $GITHUB_ENV
            elif ${{ github.event.inputs.version_level == 'minor' }};
            then
              echo "TAG_VERSION=${{ steps.semvers.outputs.minor }}" >> $GITHUB_ENV
              echo "RELEASE_VERSION=${{ steps.semvers.outputs.minor }}" >> $GITHUB_ENV
            elif ${{ github.event.inputs.version_level == 'patch' }};
            then
              echo "TAG_VERSION=${{ steps.semvers.outputs.patch }}" >> $GITHUB_ENV
              echo "RELEASE_VERSION=${{ steps.semvers.outputs.patch }}" >> $GITHUB_ENV
            else
              echo "TAG_VERSION=${{ steps.semvers.outputs.patch }}-${{ env.COMMIT_HASH }}" >> $GITHUB_ENV
              echo "RELEASE_VERSION=${{ steps.semvers.outputs.patch }}-${{ env.COMMIT_HASH }}" >> $GITHUB_ENV
            fi
          fi

      - name: Print release and tag version
        run: |
          echo "Tag version: ${{ env.TAG_VERSION }}"
          echo "Release version: ${{ env.RELEASE_VERSION }}"

      - name: Set output variables
        id: set_outputs
        run: |
          echo "TAG_VERSION=${{ env.TAG_VERSION }}" >> $GITHUB_OUTPUT
          echo "RELEASE_VERSION=${{ env.RELEASE_VERSION }}" >> $GITHUB_OUTPUT
          echo "COMMIT_BRANCH=${{ env.COMMIT_BRANCH }}" >> $GITHUB_OUTPUT
          echo "COMMIT_HASH=${{ env.COMMIT_HASH }}" >> $GITHUB_OUTPUT

  build_amd64:
    name: "Build amd64 image"
    needs: [buildVariables]
    runs-on: ubuntu-latest
    env:
      TAG_VERSION: ${{ needs.buildVariables.outputs.tag_version }}
      RELEASE_VERSION: ${{ needs.buildVariables.outputs.release_version }}
      COMMIT_BRANCH: ${{ needs.buildVariables.outputs.commit_branch }}
      COMMIT_HASH: ${{ needs.buildVariables.outputs.commit_hash }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push amd64 image
        id: docker_build_amd64
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          file: ./Dockerfile
          push: ${{ inputs.push }}
          tags: ${{ secrets.DOCKER_USERNAME }}/energyapp:${{ env.RELEASE_VERSION }}-amd64

  build_arm64:
    name: "Build arm64 image"
    needs: [buildVariables]
    runs-on: ubuntu-24.04-arm
    env:
      TAG_VERSION: ${{ needs.buildVariables.outputs.tag_version }}
      RELEASE_VERSION: ${{ needs.buildVariables.outputs.release_version }}
      COMMIT_BRANCH: ${{ needs.buildVariables.outputs.commit_branch }}
      COMMIT_HASH: ${{ needs.buildVariables.outputs.commit_hash }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive

      - uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push arm64 image
        id: docker_build_arm64
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/arm64
          file: ./Dockerfile
          push: ${{ inputs.push }}
          tags: ${{ secrets.DOCKER_USERNAME }}/energyapp:${{ env.RELEASE_VERSION }}-arm64

  push_combined:
    name: "Push combined image"
    needs: [build_amd64, build_arm64]
    runs-on: ubuntu-latest
    steps:
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Combine and push images
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/energyapp:${{ needs.build_amd64.outputs.RELEASE_VERSION }}-amd64
          docker pull ${{ secrets.DOCKER_USERNAME }}/energyapp:${{ needs.build_arm64.outputs.RELEASE_VERSION }}-arm64
          docker tag ${{ secrets.DOCKER_USERNAME }}/energyapp:${{ needs.build_amd64.outputs.RELEASE_VERSION }}-amd64 ${{ secrets.DOCKER_USERNAME }}/energyapp:${{ env.RELEASE_VERSION }}
          docker tag ${{ secrets.DOCKER_USERNAME }}/energyapp:${{ needs.build_arm64.outputs.RELEASE_VERSION }}-arm64 ${{ secrets.DOCKER_USERNAME }}/energyapp:${{ env.RELEASE_VERSION }}
          docker push ${{ secrets.DOCKER_USERNAME }}/energyapp:${{ env.RELEASE_VERSION }}
          docker push ${{ secrets.DOCKER_USERNAME }}/energyapp:latest

  create_release:
    needs: [buildVariables, push_combined]
    name: Create a new release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: ${{ github.event.inputs.version_level != 'commit' }}
    env:
      RELEASE_VERSION: ${{ needs.buildVariables.outputs.release_version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        env:
          TAG_VERSION: ${{ needs.buildVariables.outputs.tag_version }}
          RELEASE_VERSION: ${{ needs.buildVariables.outputs.release_version }}
          COMMIT_BRANCH: ${{ needs.buildVariables.outputs.commit_branch }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag: "${{ env.TAG_VERSION }}"
          name: "${{ env.RELEASE_VERSION }}"
          commit: "${{ env.COMMIT_BRANCH }}"
          draft: false
          prerelease: false
          allowUpdates: true
          updateOnlyUnreleased: true

  # docker:
  #   name: "Build and push energyapp"
  #   needs: [buildVariables]
  #   runs-on: ubuntu-latest
  #   env:
  #     TAG_VERSION: ${{ needs.buildVariables.outputs.tag_version }}
  #     RELEASE_VERSION: ${{ needs.buildVariables.outputs.release_version }}
  #     COMMIT_BRANCH: ${{ needs.buildVariables.outputs.commit_branch }}
  #     COMMIT_HASH: ${{ needs.buildVariables.outputs.commit_hash }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #         submodules: recursive

  #     - uses: docker/setup-buildx-action@v3
  #     - name: Login to DockerHub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKER_USERNAME }}
  #         password: ${{ secrets.DOCKER_PASSWORD }}

  #     - name: Build and push
  #       id: docker_build
  #       uses: docker/build-push-action@v5
  #       with:
  #         context: .
  #         platforms: linux/amd64,linux/arm64
  #         file: ./Dockerfile
  #         push: ${{ inputs.push }}
  #         tags: ${{ secrets.DOCKER_USERNAME }}/energyapp:${{ env.RELEASE_VERSION }},${{ secrets.DOCKER_USERNAME }}/energyapp:latest
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  #     - name: Extract binary
  #       run: |
  #         docker create --name temp_container ${{ secrets.DOCKER_USERNAME }}/energyapp:${{ env.RELEASE_VERSION }}
  #         docker exec temp_container tar -czf /app.tar.gz -C /app . --exclude=node_modules
  #         docker cp temp_container:/app.tar.gz ./energyapp-${{ needs.buildVariables.outputs.release_version }}.tar.gz
  #         docker rm temp_container

  #     - name: Upload binary
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: energyapp
  #         path: ./energyapp-${{ needs.buildVariables.outputs.release_version }}.tar.gz

  # create_release:
  #   needs: [buildVariables, docker]
  #   name: Create a new release
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: write
  #   if: ${{ github.event.inputs.version_level != 'commit' }}
  #   env:
  #     RELEASE_VERSION: ${{ needs.buildVariables.outputs.release_version }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #     - name: Download energyapp artifacts
  #       uses: actions/download-artifact@v4
  #       with:
  #         name: energyapp
  #         path: ./artifacts
  #     - name: List
  #       run: find ./artifacts
  #     - name: Create Release
  #       id: create_release
  #       uses: ncipollo/release-action@v1
  #       env:
  #         TAG_VERSION: ${{ needs.buildVariables.outputs.tag_version }}
  #         RELEASE_VERSION: ${{ needs.buildVariables.outputs.release_version }}
  #         COMMIT_BRANCH: ${{ needs.buildVariables.outputs.commit_branch }}
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
  #       with:
  #         tag: "${{ env.TAG_VERSION }}"
  #         name: "${{ env.RELEASE_VERSION }}"
  #         commit: "${{ env.COMMIT_BRANCH }}"
  #         draft: false
  #         prerelease: false
  #         allowUpdates: true
  #         updateOnlyUnreleased: true
  #         artifacts: "./artifacts/*"
