generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table has subclasses and requires additional setup for migrations. Visit https://pris.ly/d/table-inheritance for more info.
model day_ahead_prices {
  time           DateTime @default(now()) @db.Timestamptz(6)
  currency       String
  in_domain      String
  out_domain     String
  price          Float    @db.Real
  measure_unit   String   @db.VarChar(3)
  source         String?
  tax_percentage Float    @default(24) @db.Real

  @@unique([time, in_domain, out_domain])
  @@index([time(sort: Desc)])
}

/// This table has subclasses and requires additional setup for migrations. Visit https://pris.ly/d/table-inheritance for more info.
model energies {
  time                DateTime @default(now()) @db.Timestamptz(6)
  metering_point_code String
  measure_type        Int
  contract_type       Int      @db.SmallInt
  source              String?
  measure_unit        String   @db.VarChar(3)
  value               Float?   @db.Real
  energy_basic_fee    Float?   @db.Real
  energy_fee          Float?   @db.Real
  energy_margin       Float?   @db.Real
  transfer_basic_fee  Float?   @db.Real
  transfer_fee        Float?   @db.Real
  transfer_tax_fee    Float?   @db.Real
  tax_percentage      Float    @default(24) @db.Real
  night               Boolean  @default(false)
  spot_price          Float?   @db.Real

  @@unique([time, metering_point_code, measure_type])
  @@index([time(sort: Desc)])
}

// Necessary for Next auth
model account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              user    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_expires_in        Int?

    @@unique([provider, providerAccountId])
}

model session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      account[]
    sessions      session[]
    posts         post[]
}

model verification_token {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   user   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}
