/* tslint:disable */
/* eslint-disable */
/**
 * Api Documentation
 * Api Documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface CsvListEvent
 */
export interface CsvListEvent {
    /**
     * 
     * @type {Array<string>}
     * @memberof CsvListEvent
     */
    'headers'?: Array<string>;
    /**
     * 
     * @type {Array<Event>}
     * @memberof CsvListEvent
     */
    'items'?: Array<Event>;
}
/**
 * 
 * @export
 * @interface Event
 */
export interface Event {
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'end_time'?: string;
    /**
     * 
     * @type {string}
     * @memberof Event
     */
    'start_time'?: string;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    'value'?: number;
    /**
     * 
     * @type {number}
     * @memberof Event
     */
    'variable_id'?: number;
}
/**
 * 
 * @export
 * @interface EventList
 */
export interface EventList {
    /**
     * 
     * @type {Array<Event>}
     * @memberof EventList
     */
    'event'?: Array<Event>;
}
/**
 * 
 * @export
 * @interface Timestamp
 */
export interface Timestamp {
    /**
     * 
     * @type {number}
     * @memberof Timestamp
     */
    'date'?: number;
    /**
     * 
     * @type {number}
     * @memberof Timestamp
     */
    'day'?: number;
    /**
     * 
     * @type {number}
     * @memberof Timestamp
     */
    'hours'?: number;
    /**
     * 
     * @type {number}
     * @memberof Timestamp
     */
    'minutes'?: number;
    /**
     * 
     * @type {number}
     * @memberof Timestamp
     */
    'month'?: number;
    /**
     * 
     * @type {number}
     * @memberof Timestamp
     */
    'nanos'?: number;
    /**
     * 
     * @type {number}
     * @memberof Timestamp
     */
    'seconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof Timestamp
     */
    'time'?: number;
    /**
     * 
     * @type {number}
     * @memberof Timestamp
     */
    'timezoneOffset'?: number;
    /**
     * 
     * @type {number}
     * @memberof Timestamp
     */
    'year'?: number;
}

/**
 * EventControllerApi - axios parameter creator
 * @export
 */
export const EventControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the last event for the given variable in csv
         * @param {number} variableId variableId
         * @param {string} xApiKey x-api-key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventCsvUsingGET: async (variableId: number, xApiKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('getEventCsvUsingGET', 'variableId', variableId)
            // verify required parameter 'xApiKey' is not null or undefined
            assertParamExists('getEventCsvUsingGET', 'xApiKey', xApiKey)
            const localVarPath = `/v1/variable/{variableId}/event/csv`
                .replace(`{${"variableId"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey != null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the last event for the given variable in json
         * @param {number} variableId variableId
         * @param {string} xApiKey x-api-key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventJsonUsingGET: async (variableId: number, xApiKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('getEventJsonUsingGET', 'variableId', variableId)
            // verify required parameter 'xApiKey' is not null or undefined
            assertParamExists('getEventJsonUsingGET', 'xApiKey', xApiKey)
            const localVarPath = `/v1/variable/{variableId}/event/json`
                .replace(`{${"variableId"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey != null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the last event for the given variable in xml
         * @param {number} variableId variableId
         * @param {string} xApiKey x-api-key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventXmlUsingGET: async (variableId: number, xApiKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('getEventXmlUsingGET', 'variableId', variableId)
            // verify required parameter 'xApiKey' is not null or undefined
            assertParamExists('getEventXmlUsingGET', 'xApiKey', xApiKey)
            const localVarPath = `/v1/variable/{variableId}/event/xml`
                .replace(`{${"variableId"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey != null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the last events for the given variables in csv
         * @param {string} commaSeparatedVariableIds commaSeparatedVariableIds
         * @param {string} xApiKey x-api-key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsCsvForVariablesUsingGET: async (commaSeparatedVariableIds: string, xApiKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commaSeparatedVariableIds' is not null or undefined
            assertParamExists('getEventsCsvForVariablesUsingGET', 'commaSeparatedVariableIds', commaSeparatedVariableIds)
            // verify required parameter 'xApiKey' is not null or undefined
            assertParamExists('getEventsCsvForVariablesUsingGET', 'xApiKey', xApiKey)
            const localVarPath = `/v1/variable/event/csv/{commaSeparatedVariableIds}`
                .replace(`{${"commaSeparatedVariableIds"}}`, encodeURIComponent(String(commaSeparatedVariableIds)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey != null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the last events for the given variables in json
         * @param {string} commaSeparatedVariableIds commaSeparatedVariableIds
         * @param {string} xApiKey x-api-key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsJsonForVariablesUsingGET: async (commaSeparatedVariableIds: string, xApiKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commaSeparatedVariableIds' is not null or undefined
            assertParamExists('getEventsJsonForVariablesUsingGET', 'commaSeparatedVariableIds', commaSeparatedVariableIds)
            // verify required parameter 'xApiKey' is not null or undefined
            assertParamExists('getEventsJsonForVariablesUsingGET', 'xApiKey', xApiKey)
            const localVarPath = `/v1/variable/event/json/{commaSeparatedVariableIds}`
                .replace(`{${"commaSeparatedVariableIds"}}`, encodeURIComponent(String(commaSeparatedVariableIds)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey != null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the last events for the given variables in xml
         * @param {string} commaSeparatedVariableIds commaSeparatedVariableIds
         * @param {string} xApiKey x-api-key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsXmlForVariablesUsingGET: async (commaSeparatedVariableIds: string, xApiKey: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'commaSeparatedVariableIds' is not null or undefined
            assertParamExists('getEventsXmlForVariablesUsingGET', 'commaSeparatedVariableIds', commaSeparatedVariableIds)
            // verify required parameter 'xApiKey' is not null or undefined
            assertParamExists('getEventsXmlForVariablesUsingGET', 'xApiKey', xApiKey)
            const localVarPath = `/v1/variable/event/xml/{commaSeparatedVariableIds}`
                .replace(`{${"commaSeparatedVariableIds"}}`, encodeURIComponent(String(commaSeparatedVariableIds)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xApiKey != null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventControllerApi - functional programming interface
 * @export
 */
export const EventControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the last event for the given variable in csv
         * @param {number} variableId variableId
         * @param {string} xApiKey x-api-key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventCsvUsingGET(variableId: number, xApiKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CsvListEvent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventCsvUsingGET(variableId, xApiKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EventControllerApi.getEventCsvUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get the last event for the given variable in json
         * @param {number} variableId variableId
         * @param {string} xApiKey x-api-key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventJsonUsingGET(variableId: number, xApiKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Event>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventJsonUsingGET(variableId, xApiKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EventControllerApi.getEventJsonUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get the last event for the given variable in xml
         * @param {number} variableId variableId
         * @param {string} xApiKey x-api-key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventXmlUsingGET(variableId: number, xApiKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Event>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventXmlUsingGET(variableId, xApiKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EventControllerApi.getEventXmlUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get the last events for the given variables in csv
         * @param {string} commaSeparatedVariableIds commaSeparatedVariableIds
         * @param {string} xApiKey x-api-key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventsCsvForVariablesUsingGET(commaSeparatedVariableIds: string, xApiKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CsvListEvent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventsCsvForVariablesUsingGET(commaSeparatedVariableIds, xApiKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EventControllerApi.getEventsCsvForVariablesUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get the last events for the given variables in json
         * @param {string} commaSeparatedVariableIds commaSeparatedVariableIds
         * @param {string} xApiKey x-api-key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventsJsonForVariablesUsingGET(commaSeparatedVariableIds: string, xApiKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Event>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventsJsonForVariablesUsingGET(commaSeparatedVariableIds, xApiKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EventControllerApi.getEventsJsonForVariablesUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get the last events for the given variables in xml
         * @param {string} commaSeparatedVariableIds commaSeparatedVariableIds
         * @param {string} xApiKey x-api-key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventsXmlForVariablesUsingGET(commaSeparatedVariableIds: string, xApiKey: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventsXmlForVariablesUsingGET(commaSeparatedVariableIds, xApiKey, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EventControllerApi.getEventsXmlForVariablesUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * EventControllerApi - factory interface
 * @export
 */
export const EventControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the last event for the given variable in csv
         * @param {number} variableId variableId
         * @param {string} xApiKey x-api-key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventCsvUsingGET(variableId: number, xApiKey: string, options?: any): AxiosPromise<CsvListEvent> {
            return localVarFp.getEventCsvUsingGET(variableId, xApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the last event for the given variable in json
         * @param {number} variableId variableId
         * @param {string} xApiKey x-api-key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventJsonUsingGET(variableId: number, xApiKey: string, options?: any): AxiosPromise<Event> {
            return localVarFp.getEventJsonUsingGET(variableId, xApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the last event for the given variable in xml
         * @param {number} variableId variableId
         * @param {string} xApiKey x-api-key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventXmlUsingGET(variableId: number, xApiKey: string, options?: any): AxiosPromise<Event> {
            return localVarFp.getEventXmlUsingGET(variableId, xApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the last events for the given variables in csv
         * @param {string} commaSeparatedVariableIds commaSeparatedVariableIds
         * @param {string} xApiKey x-api-key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsCsvForVariablesUsingGET(commaSeparatedVariableIds: string, xApiKey: string, options?: any): AxiosPromise<CsvListEvent> {
            return localVarFp.getEventsCsvForVariablesUsingGET(commaSeparatedVariableIds, xApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the last events for the given variables in json
         * @param {string} commaSeparatedVariableIds commaSeparatedVariableIds
         * @param {string} xApiKey x-api-key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsJsonForVariablesUsingGET(commaSeparatedVariableIds: string, xApiKey: string, options?: any): AxiosPromise<Array<Event>> {
            return localVarFp.getEventsJsonForVariablesUsingGET(commaSeparatedVariableIds, xApiKey, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the last events for the given variables in xml
         * @param {string} commaSeparatedVariableIds commaSeparatedVariableIds
         * @param {string} xApiKey x-api-key
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsXmlForVariablesUsingGET(commaSeparatedVariableIds: string, xApiKey: string, options?: any): AxiosPromise<EventList> {
            return localVarFp.getEventsXmlForVariablesUsingGET(commaSeparatedVariableIds, xApiKey, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventControllerApi - object-oriented interface
 * @export
 * @class EventControllerApi
 * @extends {BaseAPI}
 */
export class EventControllerApi extends BaseAPI {
    /**
     * 
     * @summary Get the last event for the given variable in csv
     * @param {number} variableId variableId
     * @param {string} xApiKey x-api-key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public getEventCsvUsingGET(variableId: number, xApiKey: string, options?: AxiosRequestConfig) {
        return EventControllerApiFp(this.configuration).getEventCsvUsingGET(variableId, xApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the last event for the given variable in json
     * @param {number} variableId variableId
     * @param {string} xApiKey x-api-key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public getEventJsonUsingGET(variableId: number, xApiKey: string, options?: AxiosRequestConfig) {
        return EventControllerApiFp(this.configuration).getEventJsonUsingGET(variableId, xApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the last event for the given variable in xml
     * @param {number} variableId variableId
     * @param {string} xApiKey x-api-key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public getEventXmlUsingGET(variableId: number, xApiKey: string, options?: AxiosRequestConfig) {
        return EventControllerApiFp(this.configuration).getEventXmlUsingGET(variableId, xApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the last events for the given variables in csv
     * @param {string} commaSeparatedVariableIds commaSeparatedVariableIds
     * @param {string} xApiKey x-api-key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public getEventsCsvForVariablesUsingGET(commaSeparatedVariableIds: string, xApiKey: string, options?: AxiosRequestConfig) {
        return EventControllerApiFp(this.configuration).getEventsCsvForVariablesUsingGET(commaSeparatedVariableIds, xApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the last events for the given variables in json
     * @param {string} commaSeparatedVariableIds commaSeparatedVariableIds
     * @param {string} xApiKey x-api-key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public getEventsJsonForVariablesUsingGET(commaSeparatedVariableIds: string, xApiKey: string, options?: AxiosRequestConfig) {
        return EventControllerApiFp(this.configuration).getEventsJsonForVariablesUsingGET(commaSeparatedVariableIds, xApiKey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the last events for the given variables in xml
     * @param {string} commaSeparatedVariableIds commaSeparatedVariableIds
     * @param {string} xApiKey x-api-key
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventControllerApi
     */
    public getEventsXmlForVariablesUsingGET(commaSeparatedVariableIds: string, xApiKey: string, options?: AxiosRequestConfig) {
        return EventControllerApiFp(this.configuration).getEventsXmlForVariablesUsingGET(commaSeparatedVariableIds, xApiKey, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * EventsControllerApi - axios parameter creator
 * @export
 */
export const EventsControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get the events for the given variable_id between given start_time and end_time in csv
         * @param {number} variableId variableId
         * @param {string} xApiKey x-api-key
         * @param {string} startTime YYYY-MM-DDThh:mm:ssZ
         * @param {string} endTime YYYY-MM-DDThh:mm:ssZ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsCsvUsingGET: async (variableId: number, xApiKey: string, startTime: string, endTime: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('getEventsCsvUsingGET', 'variableId', variableId)
            // verify required parameter 'xApiKey' is not null or undefined
            assertParamExists('getEventsCsvUsingGET', 'xApiKey', xApiKey)
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getEventsCsvUsingGET', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getEventsCsvUsingGET', 'endTime', endTime)
            const localVarPath = `/v1/variable/{variableId}/events/csv`
                .replace(`{${"variableId"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startTime !== undefined) {
                localVarQueryParameter['start_time'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }

            if (xApiKey != null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the events for the given variable_id between given start_time and end_time in json
         * @param {number} variableId variableId
         * @param {string} xApiKey x-api-key
         * @param {string} startTime YYYY-MM-DDThh:mm:ssZ
         * @param {string} endTime YYYY-MM-DDThh:mm:ssZ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsJsonUsingGET: async (variableId: number, xApiKey: string, startTime: string, endTime: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('getEventsJsonUsingGET', 'variableId', variableId)
            // verify required parameter 'xApiKey' is not null or undefined
            assertParamExists('getEventsJsonUsingGET', 'xApiKey', xApiKey)
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getEventsJsonUsingGET', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getEventsJsonUsingGET', 'endTime', endTime)
            const localVarPath = `/v1/variable/{variableId}/events/json`
                .replace(`{${"variableId"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startTime !== undefined) {
                localVarQueryParameter['start_time'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }

            if (xApiKey != null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get the events for the given variable_id between given start_time and end_time in xml
         * @param {number} variableId variableId
         * @param {string} xApiKey x-api-key
         * @param {string} startTime YYYY-MM-DDThh:mm:ssZ
         * @param {string} endTime YYYY-MM-DDThh:mm:ssZ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsXmlUsingGET: async (variableId: number, xApiKey: string, startTime: string, endTime: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'variableId' is not null or undefined
            assertParamExists('getEventsXmlUsingGET', 'variableId', variableId)
            // verify required parameter 'xApiKey' is not null or undefined
            assertParamExists('getEventsXmlUsingGET', 'xApiKey', xApiKey)
            // verify required parameter 'startTime' is not null or undefined
            assertParamExists('getEventsXmlUsingGET', 'startTime', startTime)
            // verify required parameter 'endTime' is not null or undefined
            assertParamExists('getEventsXmlUsingGET', 'endTime', endTime)
            const localVarPath = `/v1/variable/{variableId}/events/xml`
                .replace(`{${"variableId"}}`, encodeURIComponent(String(variableId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startTime !== undefined) {
                localVarQueryParameter['start_time'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['end_time'] = endTime;
            }

            if (xApiKey != null) {
                localVarHeaderParameter['x-api-key'] = String(xApiKey);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsControllerApi - functional programming interface
 * @export
 */
export const EventsControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventsControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get the events for the given variable_id between given start_time and end_time in csv
         * @param {number} variableId variableId
         * @param {string} xApiKey x-api-key
         * @param {string} startTime YYYY-MM-DDThh:mm:ssZ
         * @param {string} endTime YYYY-MM-DDThh:mm:ssZ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventsCsvUsingGET(variableId: number, xApiKey: string, startTime: string, endTime: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CsvListEvent>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventsCsvUsingGET(variableId, xApiKey, startTime, endTime, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EventsControllerApi.getEventsCsvUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get the events for the given variable_id between given start_time and end_time in json
         * @param {number} variableId variableId
         * @param {string} xApiKey x-api-key
         * @param {string} startTime YYYY-MM-DDThh:mm:ssZ
         * @param {string} endTime YYYY-MM-DDThh:mm:ssZ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventsJsonUsingGET(variableId: number, xApiKey: string, startTime: string, endTime: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Event>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventsJsonUsingGET(variableId, xApiKey, startTime, endTime, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EventsControllerApi.getEventsJsonUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
        /**
         * 
         * @summary Get the events for the given variable_id between given start_time and end_time in xml
         * @param {number} variableId variableId
         * @param {string} xApiKey x-api-key
         * @param {string} startTime YYYY-MM-DDThh:mm:ssZ
         * @param {string} endTime YYYY-MM-DDThh:mm:ssZ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEventsXmlUsingGET(variableId: number, xApiKey: string, startTime: string, endTime: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<EventList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getEventsXmlUsingGET(variableId, xApiKey, startTime, endTime, options);
            const index = configuration?.serverIndex ?? 0;
            const operationBasePath = operationServerMap['EventsControllerApi.getEventsXmlUsingGET']?.[index]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, operationBasePath || basePath);
        },
    }
};

/**
 * EventsControllerApi - factory interface
 * @export
 */
export const EventsControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventsControllerApiFp(configuration)
    return {
        /**
         * 
         * @summary Get the events for the given variable_id between given start_time and end_time in csv
         * @param {number} variableId variableId
         * @param {string} xApiKey x-api-key
         * @param {string} startTime YYYY-MM-DDThh:mm:ssZ
         * @param {string} endTime YYYY-MM-DDThh:mm:ssZ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsCsvUsingGET(variableId: number, xApiKey: string, startTime: string, endTime: string, options?: any): AxiosPromise<CsvListEvent> {
            return localVarFp.getEventsCsvUsingGET(variableId, xApiKey, startTime, endTime, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the events for the given variable_id between given start_time and end_time in json
         * @param {number} variableId variableId
         * @param {string} xApiKey x-api-key
         * @param {string} startTime YYYY-MM-DDThh:mm:ssZ
         * @param {string} endTime YYYY-MM-DDThh:mm:ssZ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsJsonUsingGET(variableId: number, xApiKey: string, startTime: string, endTime: string, options?: any): AxiosPromise<Array<Event>> {
            return localVarFp.getEventsJsonUsingGET(variableId, xApiKey, startTime, endTime, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get the events for the given variable_id between given start_time and end_time in xml
         * @param {number} variableId variableId
         * @param {string} xApiKey x-api-key
         * @param {string} startTime YYYY-MM-DDThh:mm:ssZ
         * @param {string} endTime YYYY-MM-DDThh:mm:ssZ
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEventsXmlUsingGET(variableId: number, xApiKey: string, startTime: string, endTime: string, options?: any): AxiosPromise<EventList> {
            return localVarFp.getEventsXmlUsingGET(variableId, xApiKey, startTime, endTime, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EventsControllerApi - object-oriented interface
 * @export
 * @class EventsControllerApi
 * @extends {BaseAPI}
 */
export class EventsControllerApi extends BaseAPI {
    /**
     * 
     * @summary Get the events for the given variable_id between given start_time and end_time in csv
     * @param {number} variableId variableId
     * @param {string} xApiKey x-api-key
     * @param {string} startTime YYYY-MM-DDThh:mm:ssZ
     * @param {string} endTime YYYY-MM-DDThh:mm:ssZ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsControllerApi
     */
    public getEventsCsvUsingGET(variableId: number, xApiKey: string, startTime: string, endTime: string, options?: AxiosRequestConfig) {
        return EventsControllerApiFp(this.configuration).getEventsCsvUsingGET(variableId, xApiKey, startTime, endTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the events for the given variable_id between given start_time and end_time in json
     * @param {number} variableId variableId
     * @param {string} xApiKey x-api-key
     * @param {string} startTime YYYY-MM-DDThh:mm:ssZ
     * @param {string} endTime YYYY-MM-DDThh:mm:ssZ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsControllerApi
     */
    public getEventsJsonUsingGET(variableId: number, xApiKey: string, startTime: string, endTime: string, options?: AxiosRequestConfig) {
        return EventsControllerApiFp(this.configuration).getEventsJsonUsingGET(variableId, xApiKey, startTime, endTime, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get the events for the given variable_id between given start_time and end_time in xml
     * @param {number} variableId variableId
     * @param {string} xApiKey x-api-key
     * @param {string} startTime YYYY-MM-DDThh:mm:ssZ
     * @param {string} endTime YYYY-MM-DDThh:mm:ssZ
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsControllerApi
     */
    public getEventsXmlUsingGET(variableId: number, xApiKey: string, startTime: string, endTime: string, options?: AxiosRequestConfig) {
        return EventsControllerApiFp(this.configuration).getEventsXmlUsingGET(variableId, xApiKey, startTime, endTime, options).then((request) => request(this.axios, this.basePath));
    }
}



